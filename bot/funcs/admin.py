import asyncio
import datetime as dt
from io import BytesIO
from typing import TYPE_CHECKING

import aiojobs
from loguru import logger


from bot.database.models.settings import Settings
from bot.database.models.users import User
from bot.upml.process_lessons import process_one_lessons_file
from bot.utils.consts import NO_DATA
from bot.utils.datehelp import format_date
from bot.utils.funcs import (
    bytes_io_to_image_id,
    name_link,
    one_notify,
    username_by_user_id,
)

if TYPE_CHECKING:
    from aiogram import Bot

    from bot.custom_types import Album
    from bot.database.repository.repository import Repository


async def process_album_lessons_func(
    chat_id: int,
    album: "Album",
    bot: "Bot",
    repo: "Repository",
) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    :param album: –ê–ª—å–±–æ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
    :param chat_id: –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∞–ª—å–±–æ–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏.
    :param bot: –¢–µ–∫—É—â–∏–π –¢–ì –ë–æ—Ç.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –°–∫–ª–µ–π–∫–∞ –∏—Ç–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
    """
    proccess_results: list[str | tuple[str, dt.date]] = []
    for photo in album.photo:
        photo_id = photo.file_id
        photo = await bot.get_file(photo_id)
        await bot.download_file(photo.file_path, image := BytesIO())

        process_result = await process_one_lessons_func(chat_id, image, bot, repo)
        proccess_results.append(process_result)

    results: list[str] = []
    for result in proccess_results:
        if isinstance(result, tuple):
            grade, lessons_date = result
            results.append(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è *{grade}-—Ö –∫–ª–∞—Å—Å–æ–≤* –Ω–∞ "
                f"*{format_date(lessons_date)}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            )
        else:
            results.append(result)

    return "\n".join(results)


async def process_one_lessons_func(
    chat_id: int,
    image: "BytesIO",
    bot: "Bot",
    repo: "Repository",
) -> tuple[str, "dt.date"] | str:
    """
    –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param chat_id: –ê–π–¥–∏ —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    :param image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –ü–∞—Ä–∞–ª–µ–ª–ª—å –∏ –¥–∞—Ç–∞, –µ—Å–ª–∏ –æ–∫–µ–π, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
    """
    try:
        lessons_date, grade, full_lessons, class_lessons = process_one_lessons_file(
            image,
        )
    except ValueError as e:
        logger.warning(text := f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {repr(e)}")
        return text

    lessons_id = await bytes_io_to_image_id(chat_id, full_lessons, bot)
    class_ids = [
        await bytes_io_to_image_id(chat_id, image, bot) for image in class_lessons
    ]

    await repo.lessons.save_or_update_to_db(lessons_id, lessons_date, grade)
    for image_id, letter in zip(class_ids, "–ê–ë–í"):
        await repo.lessons.save_or_update_to_db(image_id, lessons_date, grade, letter)

    return grade, lessons_date


async def get_meal_by_date(
    repo: "Repository",
    meal: str,
    menu_date: "dt.date",
) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ.

    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param meal: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
    :param menu_date: –î–∞—Ç–∞.
    :return: –ü—Ä–∏—ë–º –ø–∏—â–∏ –∏–∑ –±–¥.
    """
    menu = await repo.menu.get(menu_date)
    return getattr(menu, meal, None) or NO_DATA


async def get_educators_schedule_by_date(
    repo: "Repository",
    schedule_date: "dt.date",
) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param schedule_date: –î–∞—Ç–∞.
    :return: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–µ–π –∏–∑ –±–¥.
    """
    schedule = await repo.educators.get(schedule_date)
    return getattr(schedule, "schedule", None) or NO_DATA


async def do_notifies(
    bot: "Bot",
    repo: "Repository",
    text: str,
    users: list["User"],
    from_who: int = 0,
    for_who: str = "",
) -> None:
    """
    –î–µ–ª–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏.

    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ.
    :param users: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param from_who: –¢–ì –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
    :param for_who: –î–ª—è –∫–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∞.
    """
    username = await username_by_user_id(bot, from_who)
    text = (
        "üîî*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* "
        f"{name_link(username, from_who)} *{for_who}*\n\n" + text
    )

    scheduler = aiojobs.Scheduler(limit=3)
    for user in users:
        await scheduler.spawn(one_notify(bot, repo, user, text))

    while scheduler.active_count:
        await asyncio.sleep(0.5)
    await scheduler.close()


# all, grade_10, grade_11, 10–ê, 10–ë, 10–í, 11–ê, 11–ë, 11–í
async def get_users_for_notify(
    repo: "Repository",
    notify_type: str = "",
    is_lessons: bool = False,
    is_news: bool = False,
) -> list["User"]:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É—Å–ª–æ–≤–∏—è–º–∏.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç notify_type –∏–∑ `async def notify_for_who_handler` –≤ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞.

    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param notify_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.
    :param is_lessons: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    :param is_news: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö (—Ä—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞).
    """
    # –ï—Å–ª–∏ notify_type == "all", —Ç–æ —Ç–æ–ª—å–∫–æ —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ.
    conditions = [(User.is_active, True)]

    if is_lessons:
        conditions.append((Settings.lessons_notify, True))
    if is_news:
        conditions.append((Settings.news_notify, True))

    if notify_type.startswith("grade"):
        conditions.append((Settings.grade, notify_type.split("_")[-1]))
    elif (
        len(notify_type) == 3
        and any(notify_type.startswith(grade) for grade in ("10", "11"))
        and any(notify_type.endswith(letter) for letter in "–ê–ë–í")
    ):  # XD
        conditions.append((Settings.class_, notify_type))

    return await repo.user.get_by_conditions(conditions)
