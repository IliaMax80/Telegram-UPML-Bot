import asyncio
from typing import TYPE_CHECKING

from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter
from loguru import logger

from bot.utils.consts import NOTIFIES_PER_BATCH
from bot.utils.funcs import name_link, username_by_user_id

if TYPE_CHECKING:
    from aiogram import Bot
    from aiogram.types import InlineKeyboardMarkup

    from bot.database.models import User
    from bot.database.repository import UserRepository


async def one_notify(
    bot: "Bot",
    repo: "UserRepository",
    user: "User",
    text: str,
    keyboard: "InlineKeyboardMarkup" = None,
    try_count: int = 1,
) -> bool:
    """
    –î–µ–ª–∞—Ç–µ–ª—å –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param user: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏.
    :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.
    :param try_count: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ rps).
    """
    try:
        await bot.send_message(text=text, chat_id=user.user_id, reply_markup=keyboard)
        logger.debug(
            f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "{" ".join(text.split())}" '
            f"—É—Å–ø–µ—à–Ω–æ –¥–ª—è {user.short_info()}",
        )
    except TelegramForbiddenError:
        await repo.update(user.user_id, is_active=0)
        return True
    except TelegramRetryAfter:
        await asyncio.sleep(try_count**2)
        return await one_notify(bot, repo, user, text, keyboard, try_count + 1)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e} [{user.short_info()}]")
        return False

    return True


async def do_admin_notifies(
    bot: "Bot",
    repo: "UserRepository",
    text: str,
    users: list["User"],
    from_who: int = 0,
    for_who: str = "",
) -> None:
    """
    –î–µ–ª–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ.
    :param users: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param from_who: –¢–ì –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
    :param for_who: –î–ª—è –∫–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∞.
    """
    username = await username_by_user_id(bot, from_who)
    text = (
        "üîî*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* "
        f"{name_link(username, from_who)} *{for_who}*\n\n" + text
    )

    for i in range(0, len(users), NOTIFIES_PER_BATCH):
        tasks = [
            asyncio.create_task(one_notify(bot, repo, user, text))
            for user in users[i : i + NOTIFIES_PER_BATCH]
        ]
        # –ò–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ one_notify –ø—Ä–∏ TelegramRetryAfter
        # –º–æ–∂–µ—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å—é —Ä–∞—Å—Å—ã–ª–∫—É.
        await asyncio.gather(*tasks)
        await asyncio.sleep(1)
