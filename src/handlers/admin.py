import asyncio
from datetime import date
from io import BytesIO

import aiojobs
from aiogram import Bot
from loguru import logger

from src.database.db_funcs import (
    get_menu_by_date, get_users_by_conditions, save_or_update_lessons,
)
from src.database.models.users import User
from src.upml.process_lessons import save_lessons
from src.utils.funcs import (
    one_notify, bytes_io_to_image_id, tg_click_name,
    username_by_user_id,
)


async def load_lessons_handler(
        chat_id: int,
        image: BytesIO,
        bot: Bot,
) -> tuple[str, date] | str:
    """
    –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param chat_id: –ê–π–¥–∏ —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    :param image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    :param bot: –¢–ì –ë–æ—Ç.
    :return: –ü–∞—Ä–∞–ª–µ–ª–ª—å –∏ –¥–∞—Ç–∞, –µ—Å–ª–∏ –æ–∫–µ–π, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
    """

    try:
        lessons_date, grade, full_lessons, class_lessons = save_lessons(image)
    except ValueError as e:
        logger.warning(text := f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {repr(e)}')
        # raise e
        return text

    lessons_id = await bytes_io_to_image_id(chat_id, full_lessons, bot)
    class_ids = [
        await bytes_io_to_image_id(chat_id, image, bot)
        for image in class_lessons
    ]

    await save_or_update_lessons(lessons_id, lessons_date, grade)
    for image_id, letter in zip(class_ids, '–ê–ë–í'):
        await save_or_update_lessons(image_id, lessons_date, grade, letter)

    return grade, lessons_date


async def get_meal_by_date(meal: str, menu_date: date) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ.

    :param meal: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
    :param menu_date: –î–∞—Ç–∞.
    :return: –ü—Ä–∏—ë–º –ø–∏—â–∏ –∏–∑ –±–¥.
    """
    menu = await get_menu_by_date(menu_date)
    return getattr(menu, meal, None)


async def do_notifies(
        bot: Bot,
        text: str,
        users: list[User],
        from_who: int = 0,
        for_who: str = ''
) -> None:
    """
    –î–µ–ª–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏.

    :param bot: –¢–ì –ë–æ—Ç.
    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ.
    :param users: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param from_who: –¢–ì –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
    :param for_who: –î–ª—è –∫–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∞.
    """

    username = await username_by_user_id(bot, from_who)
    text = 'üîî*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* ' \
           f'{tg_click_name(username, from_who)} *{for_who}*\n\n' + text

    scheduler = aiojobs.Scheduler(limit=3)
    for user in users:
        await scheduler.spawn(one_notify(text, user, bot))

    while scheduler.active_count:
        await asyncio.sleep(0.5)
    await scheduler.close()


# all, grade_10, grade_11, 10–ê, 10–ë, 10–í, 11–ê, 11–ë, 11–í
async def get_users_for_notify(
        notify_type: str = '',
        is_lessons: bool = False,
        is_news: bool = False,
) -> list[User]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ notify_type
    –∏–∑ src/view/admin/admin_notifies.py ``async def notify_for_who_view``
    –≤ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞.

    :param notify_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.
    :param is_lessons: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    :param is_news: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö (—Ä—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞).
    """

    conditions = [('is_active', True)]

    if is_lessons:
        conditions.append(('lessons_notify', True))
    if is_news:
        conditions.append(('news_notify', True))

    if notify_type.startswith('grade'):
        conditions.append(('grade', notify_type.split('_')[-1]))
    elif len(notify_type) == 3 \
            and any(notify_type.startswith(grade) for grade in ('10', '11')) \
            and any(notify_type.endswith(letter) for letter in '–ê–ë–í'):  # XD
        conditions.append(('class_', notify_type))

    return await get_users_by_conditions(conditions)
